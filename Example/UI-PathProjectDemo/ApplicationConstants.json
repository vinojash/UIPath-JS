{
    "chromePath": "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe",
    "chromeParameter": "--remote-debugging-port=9222 --new-window ",
    "chromeEndPoint": "http://localhost:9222/json",
    "gameURL": "https://htmlpreview.github.io/?https://raw.githubusercontent.com/vinojash/UIPath-JS/master/Example/Demo%20HTML%20Page/index.html",
    "pageTitle": "Chess",
    "evaluateBoard": "function evaluateBoard(board, color) { var pieceValue = {'p': 100,'n': 350,'b': 350,'r': 525,'q': 1000,'k': 10000};var value = 0;board.forEach(function(row) {row.forEach(function(piece) {if (piece) {value += pieceValue[piece['type']]* (piece['color'] === color ? 1 : -1);}});});return value;}",
    "calcBestMove": "function calcBestMove(depth, game, playerColor,alpha = Number.NEGATIVE_INFINITY,beta = Number.POSITIVE_INFINITY,isMaximizingPlayer = true) {if (depth === 0) {value = evaluateBoard(game.board(), playerColor);return [value, null]}var bestMove = null;var possibleMoves = game.moves();possibleMoves.sort(function(a, b) {return 0.5 - Math.random()});var bestMoveValue = isMaximizingPlayer ? Number.NEGATIVE_INFINITY :Number.POSITIVE_INFINITY;for (var i = 0; i < possibleMoves.length; i++) {var move = possibleMoves[i];game.move(move);value = calcBestMove(depth - 1, game, playerColor, alpha, beta, !isMaximizingPlayer)[0];console.log(isMaximizingPlayer ? 'Max: ' : 'Min: ', depth, move, value,bestMove, bestMoveValue);if (isMaximizingPlayer) {if (value > bestMoveValue) {bestMoveValue = value;bestMove = move;}alpha = Math.max(alpha, value);} else {if (value < bestMoveValue) {bestMoveValue = value;bestMove = move;}beta = Math.min(beta, value);}game.undo();if (beta <= alpha) {console.log('Prune', alpha, beta);break;}}console.log('Depth: ' + depth + ' | Best Move: ' + bestMove + ' | ' + bestMoveValue + ' | A: ' + alpha + ' | B: ' + beta);return [bestMoveValue, bestMove || possibleMoves[0]];}",
    "isGameOver": "game.game_over();",
    "findPlayerTurn": "game.turn();",
    "getMoveInformation": "function getMoveInformation(){var position=calcBestMove(3, game, game.turn())[1];var moveInformation=game.move(position);game.undo();return JSON.stringify(moveInformation);}getMoveInformation();",
    "botWonAnnoncement":"UI-Path bot won the game..!",
    "humanWonAnnoncement":" won the game..!"
}